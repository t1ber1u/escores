import { Config } from '@wdio/sync';
import path from 'path';
import fs from 'fs';

function resolveDynamicPath(basePath: string, pattern: string): string {
    const directories = fs.readdirSync(basePath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory() && dirent.name.includes(pattern))
        .map(dirent => path.join(basePath, dirent.name));

    if (directories.length !== 1) {
        throw new Error(`Expected exactly one directory matching pattern ${pattern} in ${basePath}, found ${directories.length}`);
    }

    return directories[0];
}

const chromePath = resolveDynamicPath(path.resolve(__dirname, './chrome'), 'mac_arm');
const chromeDriverPath = resolveDynamicPath(path.resolve(__dirname, './chromedriver'), 'mac_arm');

const isWindows = process.platform === 'win32';
const chromeBinary = isWindows ? 'chrome.exe' : 'chrome';
const chromeDriverBinary = isWindows ? 'chromedriver.exe' : 'chromedriver';

export const config: Config = {
    runner: 'local',
    specs: [
        './test/specs/**/*.ts'
    ],
    maxInstances: 1,
    capabilities: [{
        maxInstances: 1,
        browserName: 'chrome',
        'goog:chromeOptions': {
            binary: path.join(chromePath, `chrome-mac-arm64`, chromeBinary),
        },
    }],
    logLevel: 'info',
    bail: 0,
    baseUrl: 'http://localhost',
    waitforTimeout: 10000,
    connectionRetryTimeout: 120000,
    connectionRetryCount: 3,
    services: [
        ['chromedriver', {
            chromedriverCustomPath: path.join(chromeDriverPath, `chromedriver-mac-arm64`, chromeDriverBinary),
        }]
    ],
    framework: 'mocha',
    reporters: ['spec'],
    mochaOpts: {
        ui: 'bdd',
        timeout: 60000
    }
};