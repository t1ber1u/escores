export default class BrowserWrapper {
    public browser: WebdriverIO.Browser;

    constructor(browser: WebdriverIO.Browser) {
        this.browser = browser;
    }

    async goToURL(url: string): Promise<void> {
        try {
            await this.browser.url(url);
        } catch (error) {
            throw new Error(`Failed to navigate to URL: ${url}. Error: ${error.message}`);
        }
    }

    async waitForDisplayed(selector: string): Promise<void> {
        try {
            const element = await this.browser.$(selector);
            await element.waitForDisplayed();
        } catch (error) {
            throw new Error(`Element with selector "${selector}" failed to display. Error: ${error.message}`);
        }
    }
}