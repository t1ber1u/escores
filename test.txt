import { Config } from '@wdio/sync';
import path from 'path';
import fs from 'fs';

function resolveChromeBinary(basePath: string): string {
    const chromePath = path.join(basePath, 'mac_arm-115.0.5790.170', 'chrome-mac-arm64', 'Google Chrome for Testing.app', 'Contents', 'MacOS', 'Google Chrome for Testing');
    if (fs.existsSync(chromePath)) {
        return chromePath;
    }
    throw new Error(`Chrome binary not found at ${chromePath}`);
}

function resolveChromeDriverBinary(basePath: string): string {
    const driverDir = path.join(basePath, 'mac_arm-115.0.5790.170', 'chromedriver-mac-arm64');
    const driverPath = path.join(driverDir, 'chromedriver');
    if (fs.existsSync(driverPath)) {
        return driverPath;
    }
    throw new Error(`ChromeDriver binary not found at ${driverPath}`);
}

const chromeBasePath = path.resolve(__dirname, './chrome');
const chromeDriverBasePath = path.resolve(__dirname, './chromedriver');

const chromeBinary = resolveChromeBinary(chromeBasePath);
const chromeDriverBinary = resolveChromeDriverBinary(chromeDriverBasePath);

console.log('Resolved Chrome path:', chromeBinary);
console.log('Resolved ChromeDriver path:', chromeDriverBinary);

export const config: Config = {
    runner: 'local',
    specs: [
        './test/specs/**/*.ts'
    ],
    maxInstances: 1,
    capabilities: [{
        maxInstances: 1,
        browserName: 'chrome',
        'goog:chromeOptions': {
            binary: chromeBinary,
        },
    }],
    logLevel: 'info',
    bail: 0,
    baseUrl: 'http://localhost',
    waitforTimeout: 10000,
    connectionRetryTimeout: 120000,
    connectionRetryCount: 3,
    services: [
        ['chromedriver', {
            chromedriverCustomPath: chromeDriverBinary,
        }]
    ],
    framework: 'mocha',
    reporters: ['spec'],
    mochaOpts: {
        ui: 'bdd',
        timeout: 60000
    }
};