ii### Test Automation Concept for CGM

#### **Overview:**
- **Project:** Test Automation for Eden-fe Application
- **Architecture:** 
  - Language: TypeScript
  - Frameworks: WebdriverIO and Cucumber BDD
  - CI/CD: GitLab with Kubernetes pods
  - Repository: Shared with Eden-fe application code

#### **Development Environment:**
- **IDE:** Visual Studio Code (VSCode), free version
- **Version Control:** Git, following Git Flow for branching and merging
- **Code Reviews:** Required approval from at least one reviewer for merge requests

#### **Project Structure:**
- **Common Areas of Functionality:** General utilities and shared functions
- **Custom Locations per Project:** Subfolders such as Unity, Magna, Nexus

#### **Automation Framework:**
- **Wrapper:** A custom wrapper over WebdriverIO to enhance stability and functionality
- **Locators:** 
  - Use XPath and CSS locators
  - Prefer relative locators over full path locators when IDs are not available

#### **Cross-Platform Compatibility:**
- Ensure paths and scripts are universal to support Windows, Linux, and MacOS

#### **Testing Strategy:**
- **Customer Bugs:** Automate to prevent recurrence
- **User Stories:** Automate at the user story level where possible
- **Execution:** 
  - Local environment for development
  - CI environment with tests filtered by team or run comprehensively

#### **Reporting:**
- **Output:** Standard BDD HTML reports
- **Distribution:** Reports sent via email post CI test runs

#### **CI/CD Integration:**
- Tests run in Kubernetes pods within the internal GitLab CI pipeline
- Unified process for running tests in different OS environments

### Chosen Approach: Hybrid
- **Hybrid Approach:** Only the crucial automation tasks are implemented by the developers themselves, while all other test cases are considered for follow-up automation done by the automation team. This approach ensures that automation is part of the user story and its definition of done but focuses on critical paths initially.

### Unique Capability:
- **Browser Version Management:** The automation project can run on any desired Chrome browser version both locally and in CI. A capability to install any version of Chrome and the corresponding ChromeDriver version has been added. Additionally, the installation of Firefox or other browsers can be done if needed. This flexibility avoids limitations associated with using a hardcoded browser version and enhances coverage and capability. Dedicated Chrome browsers built for automation by Google are utilized.

### Key Goals:
1. **Stability:** Enhance stability of UI tests through a custom WebdriverIO wrapper
2. **Cross-Platform Support:** Ensure scripts are compatible across multiple operating systems
3. **Efficiency:** Automate customer bugs and user stories to improve test coverage and quality
4. **Consistency:** Follow Git Flow for consistent version control and code integration
5. **Visibility:** Develop and implement email-based reporting for CI test runs
6. **Flexibility:** Provide the capability to run tests on any Chrome browser version, enhancing test coverage and adaptability.

### Risks in Test Automation and Mitigation Actions

#### **Risk ID: R1**
**Risk:** Not having well-defined acceptance criteria and requirements
- **Mitigation Actions:**
  - Conduct detailed requirement gathering sessions.
  - Ensure user stories are specific, measurable, and achievable.
  - Implement a rigorous review process for user stories and acceptance criteria.

#### **Risk ID: R2**
**Risk:** User stories being more like epics
- **Mitigation Actions:**
  - Break down large epics into smaller, more manageable user stories.
  - Conduct regular grooming sessions to refine and split epics.
  - Involve all stakeholders in defining and approving the scope of user stories.

#### **Risk ID: R3**
**Risk:** Application failing to meet its functional requirements
- **Mitigation Actions:**
  - Implement comprehensive test coverage for all functional requirements.
  - Perform regular validation and verification against requirements.
  - Involve business analysts and stakeholders in the review of test cases.

#### **Risk ID: R4**
**Risk:** Flaky tests in CI due to tests not executed in CI during the development process prior to merging into the main branch
- **Mitigation Actions:**
  - Enforce a policy that mandates running tests in CI before merging.
  - Implement pre-merge checks and gates to ensure tests are executed.
  - Conduct root cause analysis and fix flaky tests promptly.

#### **Risk ID: R5**
**Risk:** Variation in automation developers' experience levels
- **Mitigation Actions:**
  - Encourage setting personal development objectives.
  - Promote sharing of knowledge and best practices.
  - Conduct regular code reviews.
  - Develop comprehensive documentation and guidelines.

#### **Risk ID: R6**
**Risk:** Automation failures when scenarios are executed in parallel to save time
- **Mitigation Actions:**
  - Ensure test scenarios are thread-safe and independent.
  - Optimize the framework for parallel execution.
  - Regularly review and refactor tests.
  - Monitor and resolve concurrency issues.

#### **Risk ID: R7**
**Risk:** Changes from other teams (e.g., DevOps) not communicated, causing automation failures and blockages
- **Mitigation Actions:**
  - Establish clear communication protocols.
  - Implement a change management process.
  - Conduct regular cross-team meetings.
  - Create a dedicated channel for urgent issues.

#### **Risk ID: R8**
**Risk:** False positives in the tests, especially at the BDD level
- **Mitigation Actions:**
  - Write clear and precise BDD scenarios.
  - Regularly review and update test cases.
  - Use robust validation techniques.
  - Analyze and debug test results thoroughly.


Risk ID,Risk,Mitigation Actions
R1,Not having well-defined acceptance criteria and requirements,- Conduct detailed requirement gathering sessions- Ensure user stories are specific, measurable, and achievable- Implement a rigorous review process for user stories and acceptance criteria
R2,User stories being more like epics,- Break down large epics into smaller, more manageable user stories- Conduct regular grooming sessions to refine and split epics- Involve all stakeholders in defining and approving the scope of user stories
R3,Application failing to meet its functional requirements,- Implement comprehensive test coverage for all functional requirements- Perform regular validation and verification against requirements- Involve business analysts and stakeholders in the review of test cases
R4,Flaky tests in CI due to tests not executed in CI during the development process prior to merging into the main branch,- Enforce a policy that mandates running tests in CI before merging- Implement pre-merge checks and gates to ensure tests are executed- Conduct root cause analysis and fix flaky tests promptly
R5,Variation in automation developersâ€™ experience levels,- Encourage setting personal development objectives- Promote sharing of knowledge and best practices- Conduct regular code reviews- Develop comprehensive documentation and guidelines
R6,Automation failures when scenarios are executed in parallel to save time,- Ensure test scenarios are thread-safe and independent- Optimize the framework for parallel execution- Regularly review and refactor tests- Monitor and resolve concurrency issues
R7,Changes from other teams (e.g., DevOps) not communicated, causing automation failures and blockages,- Establish clear communication protocols- Implement a change management process- Conduct regular cross-team meetings- Create a dedicated channel for urgent issues
R8,False positives in the tests, especially at the BDD level,- Write clear and precise BDD scenarios- Regularly review and update test cases- Use robust validation techniques- Analyze and debug test results thoroughly

This chapter outlines potential risks in the test automation process and provides concise steps to mitigate these risks, ensuring a robust and reliable test automation framework.