import { Options } from '@wdio/types';
import { hooks } from './src/support/hooks.ts';
import path from 'path';
import fs from 'fs';

function resolveDynamicFolder(basePath: string, pattern: string): string {
    const directories = fs.readdirSync(basePath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory() && dirent.name.includes(pattern))
        .map(dirent => path.join(basePath, dirent.name));

    if (directories.length !== 1) {
        throw new Error(`Expected exactly one directory matching pattern ${pattern} in ${basePath}, found ${directories.length}`);
    }

    return directories[0];
}

function resolveChromeBinary(basePath: string): string {
    const isMac = process.platform === 'darwin';
    const chromePath = isMac ? 
        path.join(basePath, 'mac_arm-', 'Google Chrome for Testing.app', 'Contents', 'MacOS', 'Google Chrome for Testing') :
        path.join(basePath, 'linux-', 'chrome');
    
    if (fs.existsSync(chromePath)) {
        return chromePath;
    }

    throw new Error(`Chrome binary not found at ${chromePath}`);
}

function resolveChromeDriverBinary(basePath: string): string {
    const isMac = process.platform === 'darwin';
    const driverDir = isMac ? 
        path.join(basePath, 'mac_arm-', 'chromedriver') :
        path.join(basePath, 'linux-', 'chromedriver');
    const driverPath = path.join(driverDir, 'chromedriver');

    if (fs.existsSync(driverPath)) {
        return driverPath;
    }

    throw new Error(`ChromeDriver binary not found at ${driverPath}`);
}

const chromeBasePath = path.resolve(__dirname, './chrome');
const chromeDriverBasePath = path.resolve(__dirname, './chromedriver');

const chromeVersionFolder = resolveDynamicFolder(chromeBasePath, process.platform === 'darwin' ? 'mac_arm-' : 'linux-');
const chromeDriverVersionFolder = resolveDynamicFolder(chromeDriverBasePath, process.platform === 'darwin' ? 'mac_arm-' : 'linux-');

const chromeBinary = resolveChromeBinary(chromeVersionFolder);
const chromeDriverBinary = resolveChromeDriverBinary(chromeDriverVersionFolder);

console.log('Resolved Chrome path:', chromeBinary);
console.log('Resolved ChromeDriver path:', chromeDriverBinary);

export const config: Options.Testrunner = {
    // Runner Configuration
    runner: 'local',
    path: '/',

    // Specify Test Files
    specs: [
        './features/**/*.feature'
    ],
    exclude: [
        // 'path/to/excluded/files'
    ],
    maxInstances: 1,
    capabilities: [{
        browserName: 'chrome',
        'goog:chromeOptions': {
            binary: chromeBinary,
            args: ['--disable-infobars', '--disable-gpu', '--window-size=1920,1080']
        }
    }],
    logLevel: 'info',
    bail: 0,
    baseUrl: 'http://localhost',
    waitforTimeout: 10000,
    connectionRetryTimeout: 90000,
    connectionRetryCount: 3,
    services: [
        ['chromedriver', {
            binary: chromeDriverBinary,
        }]
    ],
    framework: 'cucumber',
    reporters: ['spec'],
    cucumberOpts: {
        require: ['./steps/*.ts'],
        format: ['pretty'],
        timeout: 60000
    }
};