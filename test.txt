npm install axios adm-zip
npm install --save-dev @types/node @types/adm-zip

scripts/identify_chrome_version.ts)

import { execSync } from 'child_process';
import axios from 'axios';
import * as AdmZip from 'adm-zip';
import * as fs from 'fs';
import * as os from 'os';
import * as path from 'path';

function getChromeVersion(): string {
  let chromeVersion = '';

  switch (os.platform()) {
    case 'darwin': // macOS
      chromeVersion = execSync('/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version')
        .toString()
        .match(/(\d+\.\d+\.\d+\.\d+)/)?.[0] || '';
      break;

    case 'win32': // Windows
      try {
        const chromePath = fs.existsSync('C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe') 
          ? 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' 
          : 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe';
        chromeVersion = execSync(`"${chromePath}" --version`)
          .toString()
          .replace('Google Chrome ', '')
          .trim();
      } catch (err) {
        console.error('Error detecting Chrome version on Windows:', err);
      }
      break;

    case 'linux': // Linux
      chromeVersion = execSync('google-chrome --version')
        .toString()
        .match(/(\d+\.\d+\.\d+\.\d+)/)?.[0] || '';
      break;

    default:
      console.error('Unsupported OS:', os.platform());
      break;
  }

  return chromeVersion;
}

async function downloadChromeDriver(version: string): Promise<void> {
  const driverVersionUrl = `https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${version}`;
  const response = await axios.get(driverVersionUrl);
  const driverVersion = response.data;

  console.log(`ChromeDriver version: ${driverVersion}`);

  const platform = os.platform();
  let driverUrl = '';

  if (platform === 'win32') {
    driverUrl = `https://chromedriver.storage.googleapis.com/${driverVersion}/chromedriver_win32.zip`;
  } else if (platform === 'linux') {
    driverUrl = `https://chromedriver.storage.googleapis.com/${driverVersion}/chromedriver_linux64.zip`;
  } else if (platform === 'darwin') {
    driverUrl = `https://chromedriver.storage.googleapis.com/${driverVersion}/chromedriver_mac64.zip`;
  }

  const responseDriver = await axios({
    url: driverUrl,
    method: 'GET',
    responseType: 'arraybuffer'
  });

  const zip = new AdmZip(responseDriver.data);
  const outputPath = path.join(__dirname, 'chromedriver');
  zip.extractAllTo(outputPath, true);

  console.log('ChromeDriver has been downloaded and extracted.');
}

async function main() {
  try {
    const chromeVersion = getChromeVersion();
    if (chromeVersion) {
      console.log(`Chrome version: ${chromeVersion}`);
      await downloadChromeDriver(chromeVersion);
    } else {
      console.error('Could not determine Chrome version.');
    }
  } catch (err) {
    console.error('An error occurred:', err);
  }
}

main();

-----------------------
Step-by-Step Integration:

	1.	Add the Pre-Test Script: Modify your TypeScript script to place it in a directory like scripts. Ensure the script runs before your test suite starts.
	2.	Update package.json: Add a script to compile and run the TypeScript script before your tests.
--------
{
  "name": "webdriverio-cucumber",
  "version": "1.0.0",
  "description": "Project to run WebdriverIO tests with Cucumber",
  "scripts": {
    "pretest": "tsc scripts/identify_chrome_version.ts && node scripts/identify_chrome_version.js",
    "test": "wdio run wdio.conf.ts",
    "wdio:local": "wdio run wdio.conf.ts",
    "wdio:gitlab": "wdio run wdio.conf.gitlab.ts"
  },
  "devDependencies": {
    "@testing-library/webdriverio": "^3.2.1",
    "@types/fs-extra": "^11.0.4",
    "@types/jest": "^29.5.1",
    "@typescript-eslint/eslint-plugin": "^6.1.1",
    "@typescript-eslint/parser": "^6.1.1",
    "@wdio/browser-runner": "^8.32.2",
    "@wdio/cli": "^8.32.2",
    "@wdio/cucumber-framework": "^8.32.2",
    "@wdio/globals": "^8.32.2",
    "@wdio/local-runner": "^8.32.2",
    "@wdio/spec-reporter": "^8.32.2",
    "@wdio/types": "^8.32.2",
    "eslint": "^8.56.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-import": "^2.28.0",
    "eslint-plugin-wdio": "^8.24.12",
    "fs-extra": "^11.1.0",
    "jest": "^29.7.0",
    "jest-circus": "^29.7.0",
    "multiple-cucumber-html-reporter": "^3.6.1",
    "npm-run-all": "^4.1.5",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.2",
    "webdriverio": "^8.32.2",
    "chromedriver": "^112.0.0",
    "adm-zip": "^0.5.9",
    "axios": "^1.4.0"
  },
  "resolutions": {
    "ejs": "^3.1.10"
  }
}
