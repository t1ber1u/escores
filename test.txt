// Cookie handling methods
async getCookies(...names: string[]): Promise<CustomCookie[]> {
  return await this.browser.getCookies(names) as CustomCookie[];
}

async setCookies(...cookies: CustomCookie[]): Promise<void> {
  for (const cookie of cookies) {
    await this.browser.setCookies(cookie);
  }
}

async deleteCookies(...names: string[]): Promise<void> {
  if (names.length > 0) {
    for (const name of names) {
      await this.browser.deleteCookies(name);
    }
  } else {
    await this.browser.deleteAllCookies();
  }
}

// Save and load cookies
async saveSessionCookies(): Promise<void> {
  const cookies = await this.browser.getCookies();
  fs.writeFileSync(this.cookiesFilePath, JSON.stringify(cookies));
}

async loadSessionCookies(): Promise<void> {
  if (fs.existsSync(this.cookiesFilePath)) {
    const cookies = JSON.parse(fs.readFileSync(this.cookiesFilePath, 'utf8'));
    await this.browser.setCookies(cookies);
    console.log("Session cookies loaded.");
  }
}

async deleteSessionCookiesFile(): Promise<void> {
  if (fs.existsSync(this.cookiesFilePath)) {
    fs.unlinkSync(this.cookiesFilePath);
    console.log("Session cookies deleted.");
  }
}