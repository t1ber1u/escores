import { Config } from '@wdio/sync';
import path from 'path';
import fs from 'fs';

function resolveDynamicFolder(basePath: string, pattern: string): string {
    const directories = fs.readdirSync(basePath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory() && dirent.name.includes(pattern))
        .map(dirent => path.join(basePath, dirent.name));

    if (directories.length !== 1) {
        throw new Error(`Expected exactly one directory matching pattern ${pattern} in ${basePath}, found ${directories.length}`);
    }

    return directories[0];
}

function resolveChromeBinary(basePath: string): string {
    const chromePath = path.join(basePath, 'chrome-mac-arm64', 'Google Chrome for Testing.app', 'Contents', 'MacOS', 'Google Chrome for Testing');
    if (fs.existsSync(chromePath)) {
        return chromePath;
    }
    throw new Error(`Chrome binary not found at ${chromePath}`);
}

function resolveChromeDriverBinary(basePath: string): string {
    const driverDir = path.join(basePath, 'chromedriver-mac-arm64');
    const driverPath = path.join(driverDir, 'chromedriver');
    if (fs.existsSync(driverPath)) {
        return driverPath;
    }
    throw new Error(`ChromeDriver binary not found at ${driverPath}`);
}

const chromeBasePath = path.resolve(__dirname, './chrome');
const chromeDriverBasePath = path.resolve(__dirname, './chromedriver');

const chromeVersionFolder = resolveDynamicFolder(chromeBasePath, 'mac_arm-');
const chromeDriverVersionFolder = resolveDynamicFolder(chromeDriverBasePath, 'mac_arm-');

const chromeBinary = resolveChromeBinary(chromeVersionFolder);
const chromeDriverBinary = resolveChromeDriverBinary(chromeDriverVersionFolder);

console.log('Resolved Chrome path:', chromeBinary);
console.log('Resolved ChromeDriver path:', chromeDriverBinary);

export const config: Config = {
    runner: 'local',
    specs: [
        './test/specs/**/*.ts'
    ],
    maxInstances: 1,
    capabilities: [{
        maxInstances: 1,
        browserName: 'chrome',
        'goog:chromeOptions': {
            binary: chromeBinary,
        },
    }],
    logLevel: 'info',
    bail: 0,
    baseUrl: 'http://localhost',
    waitforTimeout: 10000,
    connectionRetryTimeout: 120000,
    connectionRetryCount: 3,
    services: [
        ['chromedriver', {
            chromedriverCustomPath: chromeDriverBinary,
        }]
    ],
    framework: 'cucumber',
    reporters: [
        'spec',
        ['cucumberjs-json', {
            jsonFolder: './reports/json/',
            language: 'en',
        }],
    ],
    cucumberOpts: {
        require: ['./src/step_definitions/**/*.ts'],
        backtrace: false,
        requireModule: [],
        dryRun: false,
        failFast: false,
        format: ['pretty'],
        snippets: true,
        source: true,
        profile: [],
        strict: false,
        tagExpression: '',
        timeout: 60000,
        ignoreUndefinedDefinitions: false
    },
};